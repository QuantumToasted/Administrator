// <auto-generated />
using System;
using System.Collections.Generic;
using Administrator.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Administrator.Migrations
{
    [DbContext(typeof(AdminDatabaseContext))]
    partial class AdminDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Administrator.Database.GlobalUser", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("HighlightBlacklist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastLevelUp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastXpGain")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LevelUpPreferences")
                        .HasColumnType("integer");

                    b.Property<List<string>>("PreviousNames")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasDefaultValueSql("'{}'");

                    b.Property<int>("TotalXp")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GlobalUsers");
                });

            modelBuilder.Entity("Administrator.Database.Guild", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("BlacklistedModmailAuthors")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''");

                    b.Property<List<string>>("CustomPrefixes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasDefaultValueSql("'{}'");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("LevelUpEmote")
                        .HasColumnType("text");

                    b.Property<int>("LevelUpWhitelist")
                        .HasColumnType("integer");

                    b.Property<int>("Settings")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("XpGainInterval")
                        .HasColumnType("interval");

                    b.Property<int>("XpRate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("Administrator.Database.GuildUser", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("LastLevelUp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastXpGain")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("PreviousNames")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasDefaultValueSql("'{}'");

                    b.Property<int>("TotalXp")
                        .HasColumnType("integer");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("GuildUsers");
                });

            modelBuilder.Entity("Administrator.Database.Highlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("Highlights");
                });

            modelBuilder.Entity("Administrator.Database.LoggingChannel", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId", "Type");

                    b.ToTable("LoggingChannels");
                });

            modelBuilder.Entity("Administrator.Database.Modmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClosedBy")
                        .HasColumnType("integer");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("Modmails");
                });

            modelBuilder.Entity("Administrator.Database.ModmailMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("ModmailMessages");
                });

            modelBuilder.Entity("Administrator.Database.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Filter")
                        .HasColumnType("integer");

                    b.Property<decimal?>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("TargetId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Administrator.Database.Punishment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("LogMessageChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("LogMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ModeratorId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<decimal>("TargetId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("Punishments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Punishment");
                });

            modelBuilder.Entity("Administrator.Database.SpecialEmote", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Emote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''");

                    b.HasKey("GuildId", "Type");

                    b.ToTable("SpecialEmotes");
                });

            modelBuilder.Entity("Administrator.Database.SpecialRole", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId", "Type");

                    b.ToTable("SpecialRoles");
                });

            modelBuilder.Entity("Administrator.Database.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("Administrator.Database.WarningPunishment", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("GuildId", "Count");

                    b.ToTable("WarningPunishments");
                });

            modelBuilder.Entity("Administrator.Database.Kick", b =>
                {
                    b.HasBaseType("Administrator.Database.Punishment");

                    b.HasDiscriminator().HasValue("Kick");
                });

            modelBuilder.Entity("Administrator.Database.RevocablePunishment", b =>
                {
                    b.HasBaseType("Administrator.Database.Punishment");

                    b.Property<string>("AppealReason")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("AppealedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAppealable")
                        .HasColumnType("boolean");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RevokerId")
                        .HasColumnType("numeric(20,0)");

                    b.HasDiscriminator().HasValue("RevocablePunishment");
                });

            modelBuilder.Entity("Administrator.Database.Ban", b =>
                {
                    b.HasBaseType("Administrator.Database.RevocablePunishment");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.HasDiscriminator().HasValue("Ban");
                });

            modelBuilder.Entity("Administrator.Database.Mute", b =>
                {
                    b.HasBaseType("Administrator.Database.RevocablePunishment");

                    b.Property<decimal?>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnName("Mute_Duration")
                        .HasColumnType("interval");

                    b.Property<decimal?>("PreviousChannelAllowValue")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("PreviousChannelDenyValue")
                        .HasColumnType("numeric(20,0)");

                    b.HasDiscriminator().HasValue("Mute");
                });

            modelBuilder.Entity("Administrator.Database.Warning", b =>
                {
                    b.HasBaseType("Administrator.Database.RevocablePunishment");

                    b.Property<int?>("SecondaryPunishmentId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Warning");
                });

            modelBuilder.Entity("Administrator.Database.ModmailMessage", b =>
                {
                    b.HasOne("Administrator.Database.Modmail", "Source")
                        .WithMany("Messages")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
