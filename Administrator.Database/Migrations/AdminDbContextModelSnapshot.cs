// <auto-generated />
using System;
using System.Collections.Generic;
using Administrator.Core;
using Administrator.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Administrator.Database.Migrations
{
    [DbContext(typeof(AdminDbContext))]
    partial class AdminDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Administrator.Database.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.HasKey("Id")
                        .HasName("pk_attachments");

                    b.ToTable("attachments", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.ButtonRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel");

                    b.Property<string>("Emoji")
                        .HasColumnType("text")
                        .HasColumnName("emoji");

                    b.Property<int?>("ExclusiveGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("exclusive_group");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("message");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role");

                    b.Property<int>("Row")
                        .HasColumnType("integer")
                        .HasColumnName("row");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_button_roles");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_button_roles_guild");

                    b.ToTable("button_roles", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.EmojiStats", b =>
                {
                    b.Property<long>("EmojiId")
                        .HasColumnType("bigint")
                        .HasColumnName("emoji");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild");

                    b.Property<int>("Uses")
                        .HasColumnType("integer")
                        .HasColumnName("uses");

                    b.HasKey("EmojiId")
                        .HasName("pk_emoji_stats");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_emoji_stats_guild");

                    b.ToTable("emoji_stats", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.ForumAutoTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild");

                    b.Property<bool>("IsRegex")
                        .HasColumnType("boolean")
                        .HasColumnName("regex");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_forum_auto_tags");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_forum_auto_tags_guild");

                    b.HasIndex("Text")
                        .IsUnique()
                        .HasDatabaseName("ix_forum_auto_tags_text");

                    b.ToTable("forum_auto_tags", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.GlobalUser", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<List<long>>("BlacklistedHighlightChannelIds")
                        .IsRequired()
                        .HasColumnType("bigint[]")
                        .HasColumnName("blacklisted_highlight_channels");

                    b.Property<List<long>>("BlacklistedHighlightUserIds")
                        .IsRequired()
                        .HasColumnType("bigint[]")
                        .HasColumnName("blacklisted_highlight_users");

                    b.Property<DateTimeOffset?>("HighlightsSnoozedUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("highlights_snoozed_until");

                    b.Property<DateTimeOffset>("LastLevelUp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_level_up");

                    b.Property<DateTimeOffset>("LastXpGain")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_xp_gain");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text")
                        .HasColumnName("timezone");

                    b.Property<int>("TotalXp")
                        .HasColumnType("integer")
                        .HasColumnName("xp");

                    b.Property<bool>("WasSentInitialJoinMessage")
                        .HasColumnType("boolean")
                        .HasColumnName("sent_initial_join_message");

                    b.HasKey("UserId")
                        .HasName("pk_global_users");

                    b.ToTable("global_users", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.Guild", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<byte[]>("ApiKeyHash")
                        .HasColumnType("bytea")
                        .HasColumnName("api_hash");

                    b.Property<byte[]>("ApiKeySalt")
                        .HasColumnType("bytea")
                        .HasColumnName("api_salt");

                    b.Property<List<long>>("AutoQuoteExemptChannelIds")
                        .IsRequired()
                        .HasColumnType("bigint[]")
                        .HasColumnName("auto_quote_exempt_channels");

                    b.Property<string>("CustomPunishmentText")
                        .HasColumnType("text")
                        .HasColumnName("punishment_text");

                    b.Property<TimeSpan?>("CustomXpInterval")
                        .HasColumnType("interval")
                        .HasColumnName("xp_interval");

                    b.Property<int?>("CustomXpRate")
                        .HasColumnType("integer")
                        .HasColumnName("xp_rate");

                    b.Property<bool>("DmGreetingMessage")
                        .HasColumnType("boolean")
                        .HasColumnName("dm_greeting");

                    b.Property<JsonMessage>("GoodbyeMessage")
                        .HasColumnType("jsonb")
                        .HasColumnName("goodbye");

                    b.Property<JsonMessage>("GreetingMessage")
                        .HasColumnType("jsonb")
                        .HasColumnName("greeting");

                    b.Property<string>("LevelUpEmoji")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level_up_emoji");

                    b.Property<int?>("MaximumTagsPerUser")
                        .HasColumnType("integer")
                        .HasColumnName("max_tags");

                    b.Property<int>("Settings")
                        .HasColumnType("integer")
                        .HasColumnName("settings");

                    b.Property<bool>("WasVisited")
                        .HasColumnType("boolean")
                        .HasColumnName("was_visited");

                    b.Property<List<long>>("XpExemptChannelIds")
                        .IsRequired()
                        .HasColumnType("bigint[]")
                        .HasColumnName("xp_exempt_channels");

                    b.HasKey("Id")
                        .HasName("pk_guilds");

                    b.ToTable("guilds", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.GuildUser", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Blurb")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("blurb");

                    b.Property<DateTimeOffset>("LastLevelUp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_level_up");

                    b.Property<DateTimeOffset>("LastXpGain")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_xp_gain");

                    b.Property<int>("TotalXp")
                        .HasColumnType("integer")
                        .HasColumnName("xp");

                    b.HasKey("GuildId", "UserId")
                        .HasName("pk_guild_users");

                    b.ToTable("guild_users", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.Highlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author");

                    b.Property<decimal?>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_highlights");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_highlights_author");

                    b.HasIndex("Text")
                        .HasDatabaseName("ix_highlights_text");

                    b.ToTable("highlights", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.InviteFilterExemption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExemptionType")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild");

                    b.Property<string>("InviteCode")
                        .HasColumnType("text")
                        .HasColumnName("invite_code");

                    b.Property<decimal?>("TargetId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("target");

                    b.HasKey("Id")
                        .HasName("pk_invite_filter_exemptions");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_invite_filter_exemptions_guild");

                    b.ToTable("invite_filter_exemptions", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.LoggingChannel", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild");

                    b.Property<int>("EventType")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel");

                    b.HasKey("GuildId", "EventType")
                        .HasName("pk_logging_channels");

                    b.ToTable("logging_channels", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.LuaCommand", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<byte[]>("Command")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("command");

                    b.Property<byte[]>("Metadata")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("metadata");

                    b.HasKey("GuildId", "Name")
                        .HasName("pk_lua_commands");

                    b.ToTable("lua_commands", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.Punishment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("attachment");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<decimal?>("DmChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("dm_channel");

                    b.Property<decimal?>("DmMessageId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("dm_message");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild");

                    b.Property<decimal?>("LogChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("log_channel");

                    b.Property<decimal?>("LogMessageId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("log_message");

                    b.Property<long>("ModeratorId")
                        .HasColumnType("bigint")
                        .HasColumnName("moderator");

                    b.Property<string>("ModeratorName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("moderator_name");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint")
                        .HasColumnName("target");

                    b.Property<string>("TargetName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("target_name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_punishments");

                    b.HasIndex("AttachmentId")
                        .HasDatabaseName("ix_punishments_attachment");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_punishments_guild");

                    b.HasIndex("TargetId")
                        .HasDatabaseName("ix_punishments_target");

                    b.ToTable("punishments");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Administrator.Database.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<double?>("RepeatInterval")
                        .HasColumnType("double precision")
                        .HasColumnName("interval");

                    b.Property<int?>("RepeatMode")
                        .HasColumnType("integer")
                        .HasColumnName("mode");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_reminders");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_reminders_author");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_reminders_expires");

                    b.ToTable("reminders", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.RoleLevelReward", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild");

                    b.Property<int>("Tier")
                        .HasColumnType("integer")
                        .HasColumnName("tier");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<List<long>>("GrantedRoleIds")
                        .IsRequired()
                        .HasColumnType("bigint[]")
                        .HasColumnName("granted_roles");

                    b.Property<List<long>>("RevokedRoleIds")
                        .IsRequired()
                        .HasColumnType("bigint[]")
                        .HasColumnName("revoked_roles");

                    b.HasKey("GuildId", "Tier", "Level")
                        .HasName("pk_level_rewards");

                    b.ToTable("level_rewards", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.Tag", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("attachment");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_used");

                    b.Property<JsonMessage>("Message")
                        .HasColumnType("jsonb")
                        .HasColumnName("message");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner");

                    b.Property<int>("Uses")
                        .HasColumnType("integer")
                        .HasColumnName("uses");

                    b.HasKey("GuildId", "Name")
                        .HasName("pk_tags");

                    b.HasIndex("AttachmentId")
                        .HasDatabaseName("ix_tags_attachment");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_tags_owner");

                    b.HasIndex("GuildId", "OwnerId")
                        .HasDatabaseName("ix_tags_guild_owner");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.WarningPunishment", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild");

                    b.Property<int>("WarningCount")
                        .HasColumnType("integer")
                        .HasColumnName("warnings");

                    b.Property<TimeSpan?>("PunishmentDuration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<int>("PunishmentType")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("GuildId", "WarningCount")
                        .HasName("pk_warning_punishments");

                    b.ToTable("warning_punishments", (string)null);
                });

            modelBuilder.Entity("Administrator.Database.Ban", b =>
                {
                    b.HasBaseType("Administrator.Database.Punishment");

                    b.Property<decimal?>("AppealChannelId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("appeal_channel");

                    b.Property<decimal?>("AppealMessageId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("appeal_message");

                    b.Property<int?>("AppealStatus")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("appeal_status");

                    b.Property<string>("AppealText")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("appeal");

                    b.Property<DateTimeOffset?>("AppealedAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("appealed");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<int?>("MessagePruneDays")
                        .HasColumnType("integer")
                        .HasColumnName("message_prune_days");

                    b.Property<string>("RevocationReason")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("revocation_reason");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked");

                    b.Property<decimal?>("RevokerId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("revoker");

                    b.Property<string>("RevokerName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("revoker_name");

                    b.ToTable("punishments");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Administrator.Database.Block", b =>
                {
                    b.HasBaseType("Administrator.Database.Punishment");

                    b.Property<decimal?>("AppealChannelId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("appeal_channel");

                    b.Property<decimal?>("AppealMessageId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("appeal_message");

                    b.Property<int?>("AppealStatus")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("appeal_status");

                    b.Property<string>("AppealText")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("appeal");

                    b.Property<DateTimeOffset?>("AppealedAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("appealed");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<decimal?>("PreviousChannelAllowPermissions")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("previous_allow_permissions");

                    b.Property<decimal?>("PreviousChannelDenyPermissions")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("previous_deny_permissions");

                    b.Property<string>("RevocationReason")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("revocation_reason");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked");

                    b.Property<decimal?>("RevokerId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("revoker");

                    b.Property<string>("RevokerName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("revoker_name");

                    b.ToTable("punishments");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Administrator.Database.Kick", b =>
                {
                    b.HasBaseType("Administrator.Database.Punishment");

                    b.ToTable("punishments");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Administrator.Database.TimedRole", b =>
                {
                    b.HasBaseType("Administrator.Database.Punishment");

                    b.Property<decimal?>("AppealChannelId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("appeal_channel");

                    b.Property<decimal?>("AppealMessageId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("appeal_message");

                    b.Property<int?>("AppealStatus")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("appeal_status");

                    b.Property<string>("AppealText")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("appeal");

                    b.Property<DateTimeOffset?>("AppealedAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("appealed");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<int>("Mode")
                        .HasColumnType("integer")
                        .HasColumnName("mode");

                    b.Property<string>("RevocationReason")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("revocation_reason");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked");

                    b.Property<decimal?>("RevokerId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("revoker");

                    b.Property<string>("RevokerName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("revoker_name");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role");

                    b.ToTable("punishments");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Administrator.Database.Timeout", b =>
                {
                    b.HasBaseType("Administrator.Database.Punishment");

                    b.Property<decimal?>("AppealChannelId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("appeal_channel");

                    b.Property<decimal?>("AppealMessageId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("appeal_message");

                    b.Property<int?>("AppealStatus")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("appeal_status");

                    b.Property<string>("AppealText")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("appeal");

                    b.Property<DateTimeOffset?>("AppealedAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("appealed");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<string>("RevocationReason")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("revocation_reason");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked");

                    b.Property<decimal?>("RevokerId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("revoker");

                    b.Property<string>("RevokerName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("revoker_name");

                    b.Property<bool>("WasManuallyRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("manually_revoked");

                    b.ToTable("punishments");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Administrator.Database.Warning", b =>
                {
                    b.HasBaseType("Administrator.Database.Punishment");

                    b.Property<int?>("AdditionalPunishmentId")
                        .HasColumnType("integer")
                        .HasColumnName("additional_punishment");

                    b.Property<decimal?>("AppealChannelId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("appeal_channel");

                    b.Property<decimal?>("AppealMessageId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("appeal_message");

                    b.Property<int?>("AppealStatus")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("appeal_status");

                    b.Property<string>("AppealText")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("appeal");

                    b.Property<DateTimeOffset?>("AppealedAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("appealed");

                    b.Property<string>("RevocationReason")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("revocation_reason");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked");

                    b.Property<decimal?>("RevokerId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("revoker");

                    b.Property<string>("RevokerName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("revoker_name");

                    b.HasIndex("AdditionalPunishmentId")
                        .HasDatabaseName("ix_punishments_additional_punishment");

                    b.ToTable("punishments");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("Administrator.Database.ButtonRole", b =>
                {
                    b.HasOne("Administrator.Database.Guild", "Guild")
                        .WithMany("ButtonRoles")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_button_roles_guilds_guild");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Administrator.Database.EmojiStats", b =>
                {
                    b.HasOne("Administrator.Database.Guild", "Guild")
                        .WithMany("EmojiStats")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_emoji_stats_guilds_guild");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Administrator.Database.ForumAutoTag", b =>
                {
                    b.HasOne("Administrator.Database.Guild", "Guild")
                        .WithMany("ForumAutoTags")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forum_auto_tags_guilds_guild");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Administrator.Database.Highlight", b =>
                {
                    b.HasOne("Administrator.Database.GlobalUser", "Author")
                        .WithMany("Highlights")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_highlights_global_users_author");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Administrator.Database.InviteFilterExemption", b =>
                {
                    b.HasOne("Administrator.Database.Guild", "Guild")
                        .WithMany("InviteFilterExemptions")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invite_filter_exemptions_guilds_guild");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Administrator.Database.LoggingChannel", b =>
                {
                    b.HasOne("Administrator.Database.Guild", "Guild")
                        .WithMany("LoggingChannels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_logging_channels_guilds_guild");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Administrator.Database.LuaCommand", b =>
                {
                    b.HasOne("Administrator.Database.Guild", "Guild")
                        .WithMany("LuaCommands")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lua_commands_guilds_guild");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Administrator.Database.Punishment", b =>
                {
                    b.HasOne("Administrator.Database.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("fk_punishments_attachments_attachment");

                    b.HasOne("Administrator.Database.Guild", "Guild")
                        .WithMany("Punishments")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_punishments_guilds_guild");

                    b.Navigation("Attachment");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Administrator.Database.Reminder", b =>
                {
                    b.HasOne("Administrator.Database.GlobalUser", "Author")
                        .WithMany("Reminders")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reminders_global_users_author");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Administrator.Database.RoleLevelReward", b =>
                {
                    b.HasOne("Administrator.Database.Guild", "Guild")
                        .WithMany("LevelRewards")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_level_rewards_guilds_guild");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Administrator.Database.Tag", b =>
                {
                    b.HasOne("Administrator.Database.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("fk_tags_attachments_attachment");

                    b.HasOne("Administrator.Database.Guild", "Guild")
                        .WithMany("Tags")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tags_guilds_guild");

                    b.HasOne("Administrator.Database.GuildUser", "Owner")
                        .WithMany("Tags")
                        .HasForeignKey("GuildId", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tags_guild_users_guild_owner");

                    b.Navigation("Attachment");

                    b.Navigation("Guild");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Administrator.Database.WarningPunishment", b =>
                {
                    b.HasOne("Administrator.Database.Guild", "Guild")
                        .WithMany("WarningPunishments")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_warning_punishments_guilds_guild");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Administrator.Database.Warning", b =>
                {
                    b.HasOne("Administrator.Database.Punishment", "AdditionalPunishment")
                        .WithMany()
                        .HasForeignKey("AdditionalPunishmentId")
                        .HasConstraintName("fk_punishments_punishments_additional_punishment");

                    b.Navigation("AdditionalPunishment");
                });

            modelBuilder.Entity("Administrator.Database.GlobalUser", b =>
                {
                    b.Navigation("Highlights");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Administrator.Database.Guild", b =>
                {
                    b.Navigation("ButtonRoles");

                    b.Navigation("EmojiStats");

                    b.Navigation("ForumAutoTags");

                    b.Navigation("InviteFilterExemptions");

                    b.Navigation("LevelRewards");

                    b.Navigation("LoggingChannels");

                    b.Navigation("LuaCommands");

                    b.Navigation("Punishments");

                    b.Navigation("Tags");

                    b.Navigation("WarningPunishments");
                });

            modelBuilder.Entity("Administrator.Database.GuildUser", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
